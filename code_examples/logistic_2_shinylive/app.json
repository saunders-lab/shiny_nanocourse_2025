[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(modelr)\n\nif (FALSE) {\n  library(munsell)\n}\n\n# Write a function to generate logistic curve data with noise\ngen_logis <- function(input, Asym = 100, xmid = 12, scal = 3, noise_sd = 5){\n  \n  # Calcululate logistic curve for inputs from defined parameters\n  vals <- Asym/(1+exp((xmid-input)/scal))\n  \n  # Add gaussian noise with fixed sd\n  noisy_vals <- rnorm(n = length(input), mean = vals, sd = noise_sd)\n  \n  return(noisy_vals)\n  \n}\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  \n  # Application title\n  titlePanel(\"Logistic growth curve fitting\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"Asym\",\n                  \"Asymptote\",\n                  min = 1,\n                  max = 100,\n                  value = 30),\n      sliderInput(\"xmid\",\n                  \"Xmid\",\n                  min = 1,\n                  max = 24,\n                  value = 12),\n      sliderInput(\"scal\",\n                  \"Scale\",\n                  min = 1,\n                  max = 10,\n                  value = 3),\n      sliderInput(\"noise_sd\",\n                  \"Noise\",\n                  min = 1,\n                  max = 20,\n                  value = 5)\n    ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      \n      #verbatimTextOutput(\"cells_data\")\n      plotOutput(\"cells_plot\"),\n      verbatimTextOutput(\"mod_summary\")\n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  df_cells <- reactive({  \n    tibble(hrs = 1:24) %>% \n      mutate(cells = gen_logis(hrs, input$Asym, input$xmid, input$scal, input$noise_sd))\n    })\n  \n  mod_logis <- reactive({\n    nls(formula = cells~SSlogis(input = hrs, Asym, xmid, scal), data = df_cells())\n    })\n  \n  #output$cells_data <- renderPrint({  \n  output$cells_plot <- renderPlot({  \n    \n    df_cells_pred <- df_cells() %>% \n      add_predictions(mod_logis())\n    \n    ggplot(df_cells_pred, aes(x = hrs)) + geom_point(aes(y = cells)) + geom_line(aes(y = pred), color = 'blue', size =1) \n    \n  })\n  \n  output$mod_summary <- renderPrint({ \n    summary(mod_logis())\n    })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
